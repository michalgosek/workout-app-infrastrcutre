// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domaintrainer "github.com/michalgosek/workout-app-infrastrcutre/trainings-service/internal/domain/trainer"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// DeleteTrainerWorkoutGroup provides a mock function with given fields: ctx, trainerUUID, groupUUID
func (_m *Repository) DeleteTrainerWorkoutGroup(ctx context.Context, trainerUUID string, groupUUID string) error {
	ret := _m.Called(ctx, trainerUUID, groupUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, trainerUUID, groupUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_DeleteTrainerWorkoutGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTrainerWorkoutGroup'
type Repository_DeleteTrainerWorkoutGroup_Call struct {
	*mock.Call
}

// DeleteTrainerWorkoutGroup is a helper method to define mock.On call
//  - ctx context.Context
//  - trainerUUID string
//  - groupUUID string
func (_e *Repository_Expecter) DeleteTrainerWorkoutGroup(ctx interface{}, trainerUUID interface{}, groupUUID interface{}) *Repository_DeleteTrainerWorkoutGroup_Call {
	return &Repository_DeleteTrainerWorkoutGroup_Call{Call: _e.mock.On("DeleteTrainerWorkoutGroup", ctx, trainerUUID, groupUUID)}
}

func (_c *Repository_DeleteTrainerWorkoutGroup_Call) Run(run func(ctx context.Context, trainerUUID string, groupUUID string)) *Repository_DeleteTrainerWorkoutGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Repository_DeleteTrainerWorkoutGroup_Call) Return(_a0 error) *Repository_DeleteTrainerWorkoutGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteTrainerWorkoutGroups provides a mock function with given fields: ctx, trainerUUID
func (_m *Repository) DeleteTrainerWorkoutGroups(ctx context.Context, trainerUUID string) error {
	ret := _m.Called(ctx, trainerUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, trainerUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_DeleteTrainerWorkoutGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTrainerWorkoutGroups'
type Repository_DeleteTrainerWorkoutGroups_Call struct {
	*mock.Call
}

// DeleteTrainerWorkoutGroups is a helper method to define mock.On call
//  - ctx context.Context
//  - trainerUUID string
func (_e *Repository_Expecter) DeleteTrainerWorkoutGroups(ctx interface{}, trainerUUID interface{}) *Repository_DeleteTrainerWorkoutGroups_Call {
	return &Repository_DeleteTrainerWorkoutGroups_Call{Call: _e.mock.On("DeleteTrainerWorkoutGroups", ctx, trainerUUID)}
}

func (_c *Repository_DeleteTrainerWorkoutGroups_Call) Run(run func(ctx context.Context, trainerUUID string)) *Repository_DeleteTrainerWorkoutGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_DeleteTrainerWorkoutGroups_Call) Return(_a0 error) *Repository_DeleteTrainerWorkoutGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

// QueryCustomerWorkoutGroup provides a mock function with given fields: ctx, trainerUUID, groupUUID, customerUUID
func (_m *Repository) QueryCustomerWorkoutGroup(ctx context.Context, trainerUUID string, groupUUID string, customerUUID string) (domaintrainer.WorkoutGroup, error) {
	ret := _m.Called(ctx, trainerUUID, groupUUID, customerUUID)

	var r0 domaintrainer.WorkoutGroup
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) domaintrainer.WorkoutGroup); ok {
		r0 = rf(ctx, trainerUUID, groupUUID, customerUUID)
	} else {
		r0 = ret.Get(0).(domaintrainer.WorkoutGroup)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, trainerUUID, groupUUID, customerUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_QueryCustomerWorkoutGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryCustomerWorkoutGroup'
type Repository_QueryCustomerWorkoutGroup_Call struct {
	*mock.Call
}

// QueryCustomerWorkoutGroup is a helper method to define mock.On call
//  - ctx context.Context
//  - trainerUUID string
//  - groupUUID string
//  - customerUUID string
func (_e *Repository_Expecter) QueryCustomerWorkoutGroup(ctx interface{}, trainerUUID interface{}, groupUUID interface{}, customerUUID interface{}) *Repository_QueryCustomerWorkoutGroup_Call {
	return &Repository_QueryCustomerWorkoutGroup_Call{Call: _e.mock.On("QueryCustomerWorkoutGroup", ctx, trainerUUID, groupUUID, customerUUID)}
}

func (_c *Repository_QueryCustomerWorkoutGroup_Call) Run(run func(ctx context.Context, trainerUUID string, groupUUID string, customerUUID string)) *Repository_QueryCustomerWorkoutGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Repository_QueryCustomerWorkoutGroup_Call) Return(_a0 domaintrainer.WorkoutGroup, _a1 error) *Repository_QueryCustomerWorkoutGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// QueryTrainerWorkoutGroup provides a mock function with given fields: ctx, trainerUUID, groupUUID
func (_m *Repository) QueryTrainerWorkoutGroup(ctx context.Context, trainerUUID string, groupUUID string) (domaintrainer.WorkoutGroup, error) {
	ret := _m.Called(ctx, trainerUUID, groupUUID)

	var r0 domaintrainer.WorkoutGroup
	if rf, ok := ret.Get(0).(func(context.Context, string, string) domaintrainer.WorkoutGroup); ok {
		r0 = rf(ctx, trainerUUID, groupUUID)
	} else {
		r0 = ret.Get(0).(domaintrainer.WorkoutGroup)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, trainerUUID, groupUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_QueryTrainerWorkoutGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryTrainerWorkoutGroup'
type Repository_QueryTrainerWorkoutGroup_Call struct {
	*mock.Call
}

// QueryTrainerWorkoutGroup is a helper method to define mock.On call
//  - ctx context.Context
//  - trainerUUID string
//  - groupUUID string
func (_e *Repository_Expecter) QueryTrainerWorkoutGroup(ctx interface{}, trainerUUID interface{}, groupUUID interface{}) *Repository_QueryTrainerWorkoutGroup_Call {
	return &Repository_QueryTrainerWorkoutGroup_Call{Call: _e.mock.On("QueryTrainerWorkoutGroup", ctx, trainerUUID, groupUUID)}
}

func (_c *Repository_QueryTrainerWorkoutGroup_Call) Run(run func(ctx context.Context, trainerUUID string, groupUUID string)) *Repository_QueryTrainerWorkoutGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Repository_QueryTrainerWorkoutGroup_Call) Return(_a0 domaintrainer.WorkoutGroup, _a1 error) *Repository_QueryTrainerWorkoutGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// QueryTrainerWorkoutGroupWithDate provides a mock function with given fields: ctx, trainerUUID, date
func (_m *Repository) QueryTrainerWorkoutGroupWithDate(ctx context.Context, trainerUUID string, date time.Time) (domaintrainer.WorkoutGroup, error) {
	ret := _m.Called(ctx, trainerUUID, date)

	var r0 domaintrainer.WorkoutGroup
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) domaintrainer.WorkoutGroup); ok {
		r0 = rf(ctx, trainerUUID, date)
	} else {
		r0 = ret.Get(0).(domaintrainer.WorkoutGroup)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = rf(ctx, trainerUUID, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_QueryTrainerWorkoutGroupWithDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryTrainerWorkoutGroupWithDate'
type Repository_QueryTrainerWorkoutGroupWithDate_Call struct {
	*mock.Call
}

// QueryTrainerWorkoutGroupWithDate is a helper method to define mock.On call
//  - ctx context.Context
//  - trainerUUID string
//  - date time.Time
func (_e *Repository_Expecter) QueryTrainerWorkoutGroupWithDate(ctx interface{}, trainerUUID interface{}, date interface{}) *Repository_QueryTrainerWorkoutGroupWithDate_Call {
	return &Repository_QueryTrainerWorkoutGroupWithDate_Call{Call: _e.mock.On("QueryTrainerWorkoutGroupWithDate", ctx, trainerUUID, date)}
}

func (_c *Repository_QueryTrainerWorkoutGroupWithDate_Call) Run(run func(ctx context.Context, trainerUUID string, date time.Time)) *Repository_QueryTrainerWorkoutGroupWithDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *Repository_QueryTrainerWorkoutGroupWithDate_Call) Return(_a0 domaintrainer.WorkoutGroup, _a1 error) *Repository_QueryTrainerWorkoutGroupWithDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// QueryTrainerWorkoutGroups provides a mock function with given fields: ctx, trainerUUID
func (_m *Repository) QueryTrainerWorkoutGroups(ctx context.Context, trainerUUID string) ([]domaintrainer.WorkoutGroup, error) {
	ret := _m.Called(ctx, trainerUUID)

	var r0 []domaintrainer.WorkoutGroup
	if rf, ok := ret.Get(0).(func(context.Context, string) []domaintrainer.WorkoutGroup); ok {
		r0 = rf(ctx, trainerUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domaintrainer.WorkoutGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, trainerUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_QueryTrainerWorkoutGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryTrainerWorkoutGroups'
type Repository_QueryTrainerWorkoutGroups_Call struct {
	*mock.Call
}

// QueryTrainerWorkoutGroups is a helper method to define mock.On call
//  - ctx context.Context
//  - trainerUUID string
func (_e *Repository_Expecter) QueryTrainerWorkoutGroups(ctx interface{}, trainerUUID interface{}) *Repository_QueryTrainerWorkoutGroups_Call {
	return &Repository_QueryTrainerWorkoutGroups_Call{Call: _e.mock.On("QueryTrainerWorkoutGroups", ctx, trainerUUID)}
}

func (_c *Repository_QueryTrainerWorkoutGroups_Call) Run(run func(ctx context.Context, trainerUUID string)) *Repository_QueryTrainerWorkoutGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_QueryTrainerWorkoutGroups_Call) Return(_a0 []domaintrainer.WorkoutGroup, _a1 error) *Repository_QueryTrainerWorkoutGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpsertTrainerWorkoutGroup provides a mock function with given fields: ctx, group
func (_m *Repository) UpsertTrainerWorkoutGroup(ctx context.Context, group domaintrainer.WorkoutGroup) error {
	ret := _m.Called(ctx, group)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domaintrainer.WorkoutGroup) error); ok {
		r0 = rf(ctx, group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_UpsertTrainerWorkoutGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertTrainerWorkoutGroup'
type Repository_UpsertTrainerWorkoutGroup_Call struct {
	*mock.Call
}

// UpsertTrainerWorkoutGroup is a helper method to define mock.On call
//  - ctx context.Context
//  - group domaintrainer.WorkoutGroup
func (_e *Repository_Expecter) UpsertTrainerWorkoutGroup(ctx interface{}, group interface{}) *Repository_UpsertTrainerWorkoutGroup_Call {
	return &Repository_UpsertTrainerWorkoutGroup_Call{Call: _e.mock.On("UpsertTrainerWorkoutGroup", ctx, group)}
}

func (_c *Repository_UpsertTrainerWorkoutGroup_Call) Run(run func(ctx context.Context, group domaintrainer.WorkoutGroup)) *Repository_UpsertTrainerWorkoutGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domaintrainer.WorkoutGroup))
	})
	return _c
}

func (_c *Repository_UpsertTrainerWorkoutGroup_Call) Return(_a0 error) *Repository_UpsertTrainerWorkoutGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
