// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domaincustomer "github.com/michalgosek/workout-app-infrastrcutre/trainings-service/internal/domain/customer"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// DeleteCustomerWorkoutDay provides a mock function with given fields: ctx, customerUUID, groupUUID
func (_m *Repository) DeleteCustomerWorkoutDay(ctx context.Context, customerUUID string, groupUUID string) error {
	ret := _m.Called(ctx, customerUUID, groupUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, customerUUID, groupUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_DeleteCustomerWorkoutDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomerWorkoutDay'
type Repository_DeleteCustomerWorkoutDay_Call struct {
	*mock.Call
}

// DeleteCustomerWorkoutDay is a helper method to define mock.On call
//  - ctx context.Context
//  - customerUUID string
//  - groupUUID string
func (_e *Repository_Expecter) DeleteCustomerWorkoutDay(ctx interface{}, customerUUID interface{}, groupUUID interface{}) *Repository_DeleteCustomerWorkoutDay_Call {
	return &Repository_DeleteCustomerWorkoutDay_Call{Call: _e.mock.On("DeleteCustomerWorkoutDay", ctx, customerUUID, groupUUID)}
}

func (_c *Repository_DeleteCustomerWorkoutDay_Call) Run(run func(ctx context.Context, customerUUID string, groupUUID string)) *Repository_DeleteCustomerWorkoutDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Repository_DeleteCustomerWorkoutDay_Call) Return(_a0 error) *Repository_DeleteCustomerWorkoutDay_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteCustomersWorkoutDaysWithGroup provides a mock function with given fields: ctx, groupUUID
func (_m *Repository) DeleteCustomersWorkoutDaysWithGroup(ctx context.Context, groupUUID string) error {
	ret := _m.Called(ctx, groupUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, groupUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_DeleteCustomersWorkoutDaysWithGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomersWorkoutDaysWithGroup'
type Repository_DeleteCustomersWorkoutDaysWithGroup_Call struct {
	*mock.Call
}

// DeleteCustomersWorkoutDaysWithGroup is a helper method to define mock.On call
//  - ctx context.Context
//  - groupUUID string
func (_e *Repository_Expecter) DeleteCustomersWorkoutDaysWithGroup(ctx interface{}, groupUUID interface{}) *Repository_DeleteCustomersWorkoutDaysWithGroup_Call {
	return &Repository_DeleteCustomersWorkoutDaysWithGroup_Call{Call: _e.mock.On("DeleteCustomersWorkoutDaysWithGroup", ctx, groupUUID)}
}

func (_c *Repository_DeleteCustomersWorkoutDaysWithGroup_Call) Run(run func(ctx context.Context, groupUUID string)) *Repository_DeleteCustomersWorkoutDaysWithGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_DeleteCustomersWorkoutDaysWithGroup_Call) Return(_a0 error) *Repository_DeleteCustomersWorkoutDaysWithGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

// QueryCustomerWorkoutDay provides a mock function with given fields: ctx, customerUUID, GroupUUID
func (_m *Repository) QueryCustomerWorkoutDay(ctx context.Context, customerUUID string, GroupUUID string) (domaincustomer.WorkoutDay, error) {
	ret := _m.Called(ctx, customerUUID, GroupUUID)

	var r0 domaincustomer.WorkoutDay
	if rf, ok := ret.Get(0).(func(context.Context, string, string) domaincustomer.WorkoutDay); ok {
		r0 = rf(ctx, customerUUID, GroupUUID)
	} else {
		r0 = ret.Get(0).(domaincustomer.WorkoutDay)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerUUID, GroupUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_QueryCustomerWorkoutDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryCustomerWorkoutDay'
type Repository_QueryCustomerWorkoutDay_Call struct {
	*mock.Call
}

// QueryCustomerWorkoutDay is a helper method to define mock.On call
//  - ctx context.Context
//  - customerUUID string
//  - GroupUUID string
func (_e *Repository_Expecter) QueryCustomerWorkoutDay(ctx interface{}, customerUUID interface{}, GroupUUID interface{}) *Repository_QueryCustomerWorkoutDay_Call {
	return &Repository_QueryCustomerWorkoutDay_Call{Call: _e.mock.On("QueryCustomerWorkoutDay", ctx, customerUUID, GroupUUID)}
}

func (_c *Repository_QueryCustomerWorkoutDay_Call) Run(run func(ctx context.Context, customerUUID string, GroupUUID string)) *Repository_QueryCustomerWorkoutDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Repository_QueryCustomerWorkoutDay_Call) Return(_a0 domaincustomer.WorkoutDay, _a1 error) *Repository_QueryCustomerWorkoutDay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpsertCustomerWorkoutDay provides a mock function with given fields: ctx, workout
func (_m *Repository) UpsertCustomerWorkoutDay(ctx context.Context, workout domaincustomer.WorkoutDay) error {
	ret := _m.Called(ctx, workout)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domaincustomer.WorkoutDay) error); ok {
		r0 = rf(ctx, workout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_UpsertCustomerWorkoutDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertCustomerWorkoutDay'
type Repository_UpsertCustomerWorkoutDay_Call struct {
	*mock.Call
}

// UpsertCustomerWorkoutDay is a helper method to define mock.On call
//  - ctx context.Context
//  - workout domaincustomer.WorkoutDay
func (_e *Repository_Expecter) UpsertCustomerWorkoutDay(ctx interface{}, workout interface{}) *Repository_UpsertCustomerWorkoutDay_Call {
	return &Repository_UpsertCustomerWorkoutDay_Call{Call: _e.mock.On("UpsertCustomerWorkoutDay", ctx, workout)}
}

func (_c *Repository_UpsertCustomerWorkoutDay_Call) Run(run func(ctx context.Context, workout domaincustomer.WorkoutDay)) *Repository_UpsertCustomerWorkoutDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domaincustomer.WorkoutDay))
	})
	return _c
}

func (_c *Repository_UpsertCustomerWorkoutDay_Call) Return(_a0 error) *Repository_UpsertCustomerWorkoutDay_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
