// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	customer "github.com/michalgosek/workout-app-infrastrcutre/trainings-service/internal/application/services/customer"
	mock "github.com/stretchr/testify/mock"
)

// CustomerService is an autogenerated mock type for the CustomerService type
type CustomerService struct {
	mock.Mock
}

type CustomerService_Expecter struct {
	mock *mock.Mock
}

func (_m *CustomerService) EXPECT() *CustomerService_Expecter {
	return &CustomerService_Expecter{mock: &_m.Mock}
}

// CancelWorkoutDay provides a mock function with given fields: ctx, args
func (_m *CustomerService) CancelWorkoutDay(ctx context.Context, args customer.CancelWorkoutDayArgs) error {
	ret := _m.Called(ctx, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, customer.CancelWorkoutDayArgs) error); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomerService_CancelWorkoutDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelWorkoutDay'
type CustomerService_CancelWorkoutDay_Call struct {
	*mock.Call
}

// CancelWorkoutDay is a helper method to define mock.On call
//  - ctx context.Context
//  - args customer.CancelWorkoutDayArgs
func (_e *CustomerService_Expecter) CancelWorkoutDay(ctx interface{}, args interface{}) *CustomerService_CancelWorkoutDay_Call {
	return &CustomerService_CancelWorkoutDay_Call{Call: _e.mock.On("CancelWorkoutDay", ctx, args)}
}

func (_c *CustomerService_CancelWorkoutDay_Call) Run(run func(ctx context.Context, args customer.CancelWorkoutDayArgs)) *CustomerService_CancelWorkoutDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(customer.CancelWorkoutDayArgs))
	})
	return _c
}

func (_c *CustomerService_CancelWorkoutDay_Call) Return(_a0 error) *CustomerService_CancelWorkoutDay_Call {
	_c.Call.Return(_a0)
	return _c
}

// CancelWorkoutDaysWithGroup provides a mock function with given fields: ctx, groupUUID
func (_m *CustomerService) CancelWorkoutDaysWithGroup(ctx context.Context, groupUUID string) error {
	ret := _m.Called(ctx, groupUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, groupUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomerService_CancelWorkoutDaysWithGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelWorkoutDaysWithGroup'
type CustomerService_CancelWorkoutDaysWithGroup_Call struct {
	*mock.Call
}

// CancelWorkoutDaysWithGroup is a helper method to define mock.On call
//  - ctx context.Context
//  - groupUUID string
func (_e *CustomerService_Expecter) CancelWorkoutDaysWithGroup(ctx interface{}, groupUUID interface{}) *CustomerService_CancelWorkoutDaysWithGroup_Call {
	return &CustomerService_CancelWorkoutDaysWithGroup_Call{Call: _e.mock.On("CancelWorkoutDaysWithGroup", ctx, groupUUID)}
}

func (_c *CustomerService_CancelWorkoutDaysWithGroup_Call) Run(run func(ctx context.Context, groupUUID string)) *CustomerService_CancelWorkoutDaysWithGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CustomerService_CancelWorkoutDaysWithGroup_Call) Return(_a0 error) *CustomerService_CancelWorkoutDaysWithGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

// CancelWorkoutDaysWithTrainer provides a mock function with given fields: ctx, trainerUUID
func (_m *CustomerService) CancelWorkoutDaysWithTrainer(ctx context.Context, trainerUUID string) error {
	ret := _m.Called(ctx, trainerUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, trainerUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomerService_CancelWorkoutDaysWithTrainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelWorkoutDaysWithTrainer'
type CustomerService_CancelWorkoutDaysWithTrainer_Call struct {
	*mock.Call
}

// CancelWorkoutDaysWithTrainer is a helper method to define mock.On call
//  - ctx context.Context
//  - trainerUUID string
func (_e *CustomerService_Expecter) CancelWorkoutDaysWithTrainer(ctx interface{}, trainerUUID interface{}) *CustomerService_CancelWorkoutDaysWithTrainer_Call {
	return &CustomerService_CancelWorkoutDaysWithTrainer_Call{Call: _e.mock.On("CancelWorkoutDaysWithTrainer", ctx, trainerUUID)}
}

func (_c *CustomerService_CancelWorkoutDaysWithTrainer_Call) Run(run func(ctx context.Context, trainerUUID string)) *CustomerService_CancelWorkoutDaysWithTrainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CustomerService_CancelWorkoutDaysWithTrainer_Call) Return(_a0 error) *CustomerService_CancelWorkoutDaysWithTrainer_Call {
	_c.Call.Return(_a0)
	return _c
}

// ScheduleWorkoutDay provides a mock function with given fields: ctx, args
func (_m *CustomerService) ScheduleWorkoutDay(ctx context.Context, args customer.ScheduleWorkoutDayArgs) error {
	ret := _m.Called(ctx, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, customer.ScheduleWorkoutDayArgs) error); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomerService_ScheduleWorkoutDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScheduleWorkoutDay'
type CustomerService_ScheduleWorkoutDay_Call struct {
	*mock.Call
}

// ScheduleWorkoutDay is a helper method to define mock.On call
//  - ctx context.Context
//  - args customer.ScheduleWorkoutDayArgs
func (_e *CustomerService_Expecter) ScheduleWorkoutDay(ctx interface{}, args interface{}) *CustomerService_ScheduleWorkoutDay_Call {
	return &CustomerService_ScheduleWorkoutDay_Call{Call: _e.mock.On("ScheduleWorkoutDay", ctx, args)}
}

func (_c *CustomerService_ScheduleWorkoutDay_Call) Run(run func(ctx context.Context, args customer.ScheduleWorkoutDayArgs)) *CustomerService_ScheduleWorkoutDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(customer.ScheduleWorkoutDayArgs))
	})
	return _c
}

func (_c *CustomerService_ScheduleWorkoutDay_Call) Return(_a0 error) *CustomerService_ScheduleWorkoutDay_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewCustomerService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCustomerService creates a new instance of CustomerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustomerService(t mockConstructorTestingTNewCustomerService) *CustomerService {
	mock := &CustomerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
