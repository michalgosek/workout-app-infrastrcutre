// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/michalgosek/workout-app-infrastrcutre/trainings-service/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// TrainerRepository is an autogenerated mock type for the TrainerRepository type
type TrainerRepository struct {
	mock.Mock
}

type TrainerRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TrainerRepository) EXPECT() *TrainerRepository_Expecter {
	return &TrainerRepository_Expecter{mock: &_m.Mock}
}

// CancelSchedule provides a mock function with given fields: ctx, scheduleUUID
func (_m *TrainerRepository) CancelSchedule(ctx context.Context, scheduleUUID string) (domain.TrainerSchedule, error) {
	ret := _m.Called(ctx, scheduleUUID)

	var r0 domain.TrainerSchedule
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.TrainerSchedule); ok {
		r0 = rf(ctx, scheduleUUID)
	} else {
		r0 = ret.Get(0).(domain.TrainerSchedule)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, scheduleUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrainerRepository_CancelSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelSchedule'
type TrainerRepository_CancelSchedule_Call struct {
	*mock.Call
}

// CancelSchedule is a helper method to define mock.On call
//  - ctx context.Context
//  - scheduleUUID string
func (_e *TrainerRepository_Expecter) CancelSchedule(ctx interface{}, scheduleUUID interface{}) *TrainerRepository_CancelSchedule_Call {
	return &TrainerRepository_CancelSchedule_Call{Call: _e.mock.On("CancelSchedule", ctx, scheduleUUID)}
}

func (_c *TrainerRepository_CancelSchedule_Call) Run(run func(ctx context.Context, scheduleUUID string)) *TrainerRepository_CancelSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TrainerRepository_CancelSchedule_Call) Return(_a0 domain.TrainerSchedule, _a1 error) *TrainerRepository_CancelSchedule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CancelSchedules provides a mock function with given fields: ctx, scheduleUUIDs
func (_m *TrainerRepository) CancelSchedules(ctx context.Context, scheduleUUIDs ...string) ([]domain.TrainerSchedule, error) {
	_va := make([]interface{}, len(scheduleUUIDs))
	for _i := range scheduleUUIDs {
		_va[_i] = scheduleUUIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []domain.TrainerSchedule
	if rf, ok := ret.Get(0).(func(context.Context, ...string) []domain.TrainerSchedule); ok {
		r0 = rf(ctx, scheduleUUIDs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.TrainerSchedule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...string) error); ok {
		r1 = rf(ctx, scheduleUUIDs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrainerRepository_CancelSchedules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelSchedules'
type TrainerRepository_CancelSchedules_Call struct {
	*mock.Call
}

// CancelSchedules is a helper method to define mock.On call
//  - ctx context.Context
//  - scheduleUUIDs ...string
func (_e *TrainerRepository_Expecter) CancelSchedules(ctx interface{}, scheduleUUIDs ...interface{}) *TrainerRepository_CancelSchedules_Call {
	return &TrainerRepository_CancelSchedules_Call{Call: _e.mock.On("CancelSchedules",
		append([]interface{}{ctx}, scheduleUUIDs...)...)}
}

func (_c *TrainerRepository_CancelSchedules_Call) Run(run func(ctx context.Context, scheduleUUIDs ...string)) *TrainerRepository_CancelSchedules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *TrainerRepository_CancelSchedules_Call) Return(_a0 []domain.TrainerSchedule, _a1 error) *TrainerRepository_CancelSchedules_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// QuerySchedule provides a mock function with given fields: ctx, scheduleUUID
func (_m *TrainerRepository) QuerySchedule(ctx context.Context, scheduleUUID string) (domain.TrainerSchedule, error) {
	ret := _m.Called(ctx, scheduleUUID)

	var r0 domain.TrainerSchedule
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.TrainerSchedule); ok {
		r0 = rf(ctx, scheduleUUID)
	} else {
		r0 = ret.Get(0).(domain.TrainerSchedule)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, scheduleUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrainerRepository_QuerySchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QuerySchedule'
type TrainerRepository_QuerySchedule_Call struct {
	*mock.Call
}

// QuerySchedule is a helper method to define mock.On call
//  - ctx context.Context
//  - scheduleUUID string
func (_e *TrainerRepository_Expecter) QuerySchedule(ctx interface{}, scheduleUUID interface{}) *TrainerRepository_QuerySchedule_Call {
	return &TrainerRepository_QuerySchedule_Call{Call: _e.mock.On("QuerySchedule", ctx, scheduleUUID)}
}

func (_c *TrainerRepository_QuerySchedule_Call) Run(run func(ctx context.Context, scheduleUUID string)) *TrainerRepository_QuerySchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TrainerRepository_QuerySchedule_Call) Return(_a0 domain.TrainerSchedule, _a1 error) *TrainerRepository_QuerySchedule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// QuerySchedules provides a mock function with given fields: ctx, trainerUUID
func (_m *TrainerRepository) QuerySchedules(ctx context.Context, trainerUUID string) ([]domain.TrainerSchedule, error) {
	ret := _m.Called(ctx, trainerUUID)

	var r0 []domain.TrainerSchedule
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.TrainerSchedule); ok {
		r0 = rf(ctx, trainerUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.TrainerSchedule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, trainerUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrainerRepository_QuerySchedules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QuerySchedules'
type TrainerRepository_QuerySchedules_Call struct {
	*mock.Call
}

// QuerySchedules is a helper method to define mock.On call
//  - ctx context.Context
//  - trainerUUID string
func (_e *TrainerRepository_Expecter) QuerySchedules(ctx interface{}, trainerUUID interface{}) *TrainerRepository_QuerySchedules_Call {
	return &TrainerRepository_QuerySchedules_Call{Call: _e.mock.On("QuerySchedules", ctx, trainerUUID)}
}

func (_c *TrainerRepository_QuerySchedules_Call) Run(run func(ctx context.Context, trainerUUID string)) *TrainerRepository_QuerySchedules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TrainerRepository_QuerySchedules_Call) Return(_a0 []domain.TrainerSchedule, _a1 error) *TrainerRepository_QuerySchedules_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpsertSchedule provides a mock function with given fields: ctx, schedule
func (_m *TrainerRepository) UpsertSchedule(ctx context.Context, schedule domain.TrainerSchedule) error {
	ret := _m.Called(ctx, schedule)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.TrainerSchedule) error); ok {
		r0 = rf(ctx, schedule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TrainerRepository_UpsertSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertSchedule'
type TrainerRepository_UpsertSchedule_Call struct {
	*mock.Call
}

// UpsertSchedule is a helper method to define mock.On call
//  - ctx context.Context
//  - schedule domain.TrainerSchedule
func (_e *TrainerRepository_Expecter) UpsertSchedule(ctx interface{}, schedule interface{}) *TrainerRepository_UpsertSchedule_Call {
	return &TrainerRepository_UpsertSchedule_Call{Call: _e.mock.On("UpsertSchedule", ctx, schedule)}
}

func (_c *TrainerRepository_UpsertSchedule_Call) Run(run func(ctx context.Context, schedule domain.TrainerSchedule)) *TrainerRepository_UpsertSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TrainerSchedule))
	})
	return _c
}

func (_c *TrainerRepository_UpsertSchedule_Call) Return(_a0 error) *TrainerRepository_UpsertSchedule_Call {
	_c.Call.Return(_a0)
	return _c
}
