// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	trainer "github.com/michalgosek/workout-app-infrastrcutre/trainings-service/internal/domain/trainer"
	mock "github.com/stretchr/testify/mock"
)

// TrainerRepository is an autogenerated mock type for the TrainerRepository type
type TrainerRepository struct {
	mock.Mock
}

type TrainerRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TrainerRepository) EXPECT() *TrainerRepository_Expecter {
	return &TrainerRepository_Expecter{mock: &_m.Mock}
}

// CancelTrainerSchedule provides a mock function with given fields: ctx, UUID, trainerUUID
func (_m *TrainerRepository) CancelTrainerSchedule(ctx context.Context, UUID string, trainerUUID string) error {
	ret := _m.Called(ctx, UUID, trainerUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, UUID, trainerUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TrainerRepository_CancelTrainerSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelTrainerSchedule'
type TrainerRepository_CancelTrainerSchedule_Call struct {
	*mock.Call
}

// CancelTrainerSchedule is a helper method to define mock.On call
//  - ctx context.Context
//  - UUID string
//  - trainerUUID string
func (_e *TrainerRepository_Expecter) CancelTrainerSchedule(ctx interface{}, UUID interface{}, trainerUUID interface{}) *TrainerRepository_CancelTrainerSchedule_Call {
	return &TrainerRepository_CancelTrainerSchedule_Call{Call: _e.mock.On("CancelTrainerSchedule", ctx, UUID, trainerUUID)}
}

func (_c *TrainerRepository_CancelTrainerSchedule_Call) Run(run func(ctx context.Context, UUID string, trainerUUID string)) *TrainerRepository_CancelTrainerSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TrainerRepository_CancelTrainerSchedule_Call) Return(_a0 error) *TrainerRepository_CancelTrainerSchedule_Call {
	_c.Call.Return(_a0)
	return _c
}

// CancelTrainerSchedules provides a mock function with given fields: ctx, trainerUUID
func (_m *TrainerRepository) CancelTrainerSchedules(ctx context.Context, trainerUUID string) error {
	ret := _m.Called(ctx, trainerUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, trainerUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TrainerRepository_CancelTrainerSchedules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelTrainerSchedules'
type TrainerRepository_CancelTrainerSchedules_Call struct {
	*mock.Call
}

// CancelTrainerSchedules is a helper method to define mock.On call
//  - ctx context.Context
//  - trainerUUID string
func (_e *TrainerRepository_Expecter) CancelTrainerSchedules(ctx interface{}, trainerUUID interface{}) *TrainerRepository_CancelTrainerSchedules_Call {
	return &TrainerRepository_CancelTrainerSchedules_Call{Call: _e.mock.On("CancelTrainerSchedules", ctx, trainerUUID)}
}

func (_c *TrainerRepository_CancelTrainerSchedules_Call) Run(run func(ctx context.Context, trainerUUID string)) *TrainerRepository_CancelTrainerSchedules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TrainerRepository_CancelTrainerSchedules_Call) Return(_a0 error) *TrainerRepository_CancelTrainerSchedules_Call {
	_c.Call.Return(_a0)
	return _c
}

// QueryTrainerSchedule provides a mock function with given fields: ctx, UUID, trainerUUID
func (_m *TrainerRepository) QueryTrainerSchedule(ctx context.Context, UUID string, trainerUUID string) (trainer.TrainerSchedule, error) {
	ret := _m.Called(ctx, UUID, trainerUUID)

	var r0 trainer.TrainerSchedule
	if rf, ok := ret.Get(0).(func(context.Context, string, string) trainer.TrainerSchedule); ok {
		r0 = rf(ctx, UUID, trainerUUID)
	} else {
		r0 = ret.Get(0).(trainer.TrainerSchedule)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, UUID, trainerUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrainerRepository_QueryTrainerSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryTrainerSchedule'
type TrainerRepository_QueryTrainerSchedule_Call struct {
	*mock.Call
}

// QueryTrainerSchedule is a helper method to define mock.On call
//  - ctx context.Context
//  - UUID string
//  - trainerUUID string
func (_e *TrainerRepository_Expecter) QueryTrainerSchedule(ctx interface{}, UUID interface{}, trainerUUID interface{}) *TrainerRepository_QueryTrainerSchedule_Call {
	return &TrainerRepository_QueryTrainerSchedule_Call{Call: _e.mock.On("QueryTrainerSchedule", ctx, UUID, trainerUUID)}
}

func (_c *TrainerRepository_QueryTrainerSchedule_Call) Run(run func(ctx context.Context, UUID string, trainerUUID string)) *TrainerRepository_QueryTrainerSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TrainerRepository_QueryTrainerSchedule_Call) Return(_a0 trainer.TrainerSchedule, _a1 error) *TrainerRepository_QueryTrainerSchedule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// QueryTrainerSchedules provides a mock function with given fields: ctx, trainerUUID
func (_m *TrainerRepository) QueryTrainerSchedules(ctx context.Context, trainerUUID string) ([]trainer.TrainerSchedule, error) {
	ret := _m.Called(ctx, trainerUUID)

	var r0 []trainer.TrainerSchedule
	if rf, ok := ret.Get(0).(func(context.Context, string) []trainer.TrainerSchedule); ok {
		r0 = rf(ctx, trainerUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]trainer.TrainerSchedule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, trainerUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrainerRepository_QueryTrainerSchedules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryTrainerSchedules'
type TrainerRepository_QueryTrainerSchedules_Call struct {
	*mock.Call
}

// QueryTrainerSchedules is a helper method to define mock.On call
//  - ctx context.Context
//  - trainerUUID string
func (_e *TrainerRepository_Expecter) QueryTrainerSchedules(ctx interface{}, trainerUUID interface{}) *TrainerRepository_QueryTrainerSchedules_Call {
	return &TrainerRepository_QueryTrainerSchedules_Call{Call: _e.mock.On("QueryTrainerSchedules", ctx, trainerUUID)}
}

func (_c *TrainerRepository_QueryTrainerSchedules_Call) Run(run func(ctx context.Context, trainerUUID string)) *TrainerRepository_QueryTrainerSchedules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TrainerRepository_QueryTrainerSchedules_Call) Return(_a0 []trainer.TrainerSchedule, _a1 error) *TrainerRepository_QueryTrainerSchedules_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpsertTrainerSchedule provides a mock function with given fields: ctx, schedule
func (_m *TrainerRepository) UpsertTrainerSchedule(ctx context.Context, schedule trainer.TrainerSchedule) error {
	ret := _m.Called(ctx, schedule)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, trainer.TrainerSchedule) error); ok {
		r0 = rf(ctx, schedule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TrainerRepository_UpsertTrainerSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertTrainerSchedule'
type TrainerRepository_UpsertTrainerSchedule_Call struct {
	*mock.Call
}

// UpsertTrainerSchedule is a helper method to define mock.On call
//  - ctx context.Context
//  - schedule trainer.TrainerSchedule
func (_e *TrainerRepository_Expecter) UpsertTrainerSchedule(ctx interface{}, schedule interface{}) *TrainerRepository_UpsertTrainerSchedule_Call {
	return &TrainerRepository_UpsertTrainerSchedule_Call{Call: _e.mock.On("UpsertTrainerSchedule", ctx, schedule)}
}

func (_c *TrainerRepository_UpsertTrainerSchedule_Call) Run(run func(ctx context.Context, schedule trainer.TrainerSchedule)) *TrainerRepository_UpsertTrainerSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(trainer.TrainerSchedule))
	})
	return _c
}

func (_c *TrainerRepository_UpsertTrainerSchedule_Call) Return(_a0 error) *TrainerRepository_UpsertTrainerSchedule_Call {
	_c.Call.Return(_a0)
	return _c
}
