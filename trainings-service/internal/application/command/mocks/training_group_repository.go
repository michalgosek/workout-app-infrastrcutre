// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	trainings "github.com/michalgosek/workout-app-infrastrcutre/trainings-service/internal/domain/trainings"
	mock "github.com/stretchr/testify/mock"
)

// TrainingGroupRepository is an autogenerated mock type for the TrainingGroupRepository type
type TrainingGroupRepository struct {
	mock.Mock
}

type TrainingGroupRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TrainingGroupRepository) EXPECT() *TrainingGroupRepository_Expecter {
	return &TrainingGroupRepository_Expecter{mock: &_m.Mock}
}

// TrainingGroup provides a mock function with given fields: ctx, trainingUUID
func (_m *TrainingGroupRepository) TrainingGroup(ctx context.Context, trainingUUID string) (trainings.TrainingGroup, error) {
	ret := _m.Called(ctx, trainingUUID)

	var r0 trainings.TrainingGroup
	if rf, ok := ret.Get(0).(func(context.Context, string) trainings.TrainingGroup); ok {
		r0 = rf(ctx, trainingUUID)
	} else {
		r0 = ret.Get(0).(trainings.TrainingGroup)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, trainingUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrainingGroupRepository_TrainingGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TrainingGroup'
type TrainingGroupRepository_TrainingGroup_Call struct {
	*mock.Call
}

// TrainingGroup is a helper method to define mock.On call
//  - ctx context.Context
//  - trainingUUID string
func (_e *TrainingGroupRepository_Expecter) TrainingGroup(ctx interface{}, trainingUUID interface{}) *TrainingGroupRepository_TrainingGroup_Call {
	return &TrainingGroupRepository_TrainingGroup_Call{Call: _e.mock.On("TrainingGroup", ctx, trainingUUID)}
}

func (_c *TrainingGroupRepository_TrainingGroup_Call) Run(run func(ctx context.Context, trainingUUID string)) *TrainingGroupRepository_TrainingGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TrainingGroupRepository_TrainingGroup_Call) Return(_a0 trainings.TrainingGroup, _a1 error) *TrainingGroupRepository_TrainingGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewTrainingGroupRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTrainingGroupRepository creates a new instance of TrainingGroupRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTrainingGroupRepository(t mockConstructorTestingTNewTrainingGroupRepository) *TrainingGroupRepository {
	mock := &TrainingGroupRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
