// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	customer "github.com/michalgosek/workout-app-infrastrcutre/trainings-service/internal/domain/customer"
	mock "github.com/stretchr/testify/mock"

	trainer "github.com/michalgosek/workout-app-infrastrcutre/trainings-service/internal/domain/trainer"
)

// CustomerAssigner is an autogenerated mock type for the CustomerAssigner type
type CustomerAssigner struct {
	mock.Mock
}

type CustomerAssigner_Expecter struct {
	mock *mock.Mock
}

func (_m *CustomerAssigner) EXPECT() *CustomerAssigner_Expecter {
	return &CustomerAssigner_Expecter{mock: &_m.Mock}
}

// QueryWorkoutGroup provides a mock function with given fields: ctx, groupUUID
func (_m *CustomerAssigner) QueryWorkoutGroup(ctx context.Context, groupUUID string) (trainer.WorkoutGroup, error) {
	ret := _m.Called(ctx, groupUUID)

	var r0 trainer.WorkoutGroup
	if rf, ok := ret.Get(0).(func(context.Context, string) trainer.WorkoutGroup); ok {
		r0 = rf(ctx, groupUUID)
	} else {
		r0 = ret.Get(0).(trainer.WorkoutGroup)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerAssigner_QueryWorkoutGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryWorkoutGroup'
type CustomerAssigner_QueryWorkoutGroup_Call struct {
	*mock.Call
}

// QueryWorkoutGroup is a helper method to define mock.On call
//  - ctx context.Context
//  - groupUUID string
func (_e *CustomerAssigner_Expecter) QueryWorkoutGroup(ctx interface{}, groupUUID interface{}) *CustomerAssigner_QueryWorkoutGroup_Call {
	return &CustomerAssigner_QueryWorkoutGroup_Call{Call: _e.mock.On("QueryWorkoutGroup", ctx, groupUUID)}
}

func (_c *CustomerAssigner_QueryWorkoutGroup_Call) Run(run func(ctx context.Context, groupUUID string)) *CustomerAssigner_QueryWorkoutGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CustomerAssigner_QueryWorkoutGroup_Call) Return(_a0 trainer.WorkoutGroup, _a1 error) *CustomerAssigner_QueryWorkoutGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpsertCustomerWorkoutDay provides a mock function with given fields: ctx, workout
func (_m *CustomerAssigner) UpsertCustomerWorkoutDay(ctx context.Context, workout customer.WorkoutDay) error {
	ret := _m.Called(ctx, workout)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, customer.WorkoutDay) error); ok {
		r0 = rf(ctx, workout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomerAssigner_UpsertCustomerWorkoutDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertCustomerWorkoutDay'
type CustomerAssigner_UpsertCustomerWorkoutDay_Call struct {
	*mock.Call
}

// UpsertCustomerWorkoutDay is a helper method to define mock.On call
//  - ctx context.Context
//  - workout customer.WorkoutDay
func (_e *CustomerAssigner_Expecter) UpsertCustomerWorkoutDay(ctx interface{}, workout interface{}) *CustomerAssigner_UpsertCustomerWorkoutDay_Call {
	return &CustomerAssigner_UpsertCustomerWorkoutDay_Call{Call: _e.mock.On("UpsertCustomerWorkoutDay", ctx, workout)}
}

func (_c *CustomerAssigner_UpsertCustomerWorkoutDay_Call) Run(run func(ctx context.Context, workout customer.WorkoutDay)) *CustomerAssigner_UpsertCustomerWorkoutDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(customer.WorkoutDay))
	})
	return _c
}

func (_c *CustomerAssigner_UpsertCustomerWorkoutDay_Call) Return(_a0 error) *CustomerAssigner_UpsertCustomerWorkoutDay_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpsertWorkoutGroup provides a mock function with given fields: ctx, group
func (_m *CustomerAssigner) UpsertWorkoutGroup(ctx context.Context, group trainer.WorkoutGroup) error {
	ret := _m.Called(ctx, group)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, trainer.WorkoutGroup) error); ok {
		r0 = rf(ctx, group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomerAssigner_UpsertWorkoutGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertWorkoutGroup'
type CustomerAssigner_UpsertWorkoutGroup_Call struct {
	*mock.Call
}

// UpsertWorkoutGroup is a helper method to define mock.On call
//  - ctx context.Context
//  - group trainer.WorkoutGroup
func (_e *CustomerAssigner_Expecter) UpsertWorkoutGroup(ctx interface{}, group interface{}) *CustomerAssigner_UpsertWorkoutGroup_Call {
	return &CustomerAssigner_UpsertWorkoutGroup_Call{Call: _e.mock.On("UpsertWorkoutGroup", ctx, group)}
}

func (_c *CustomerAssigner_UpsertWorkoutGroup_Call) Run(run func(ctx context.Context, group trainer.WorkoutGroup)) *CustomerAssigner_UpsertWorkoutGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(trainer.WorkoutGroup))
	})
	return _c
}

func (_c *CustomerAssigner_UpsertWorkoutGroup_Call) Return(_a0 error) *CustomerAssigner_UpsertWorkoutGroup_Call {
	_c.Call.Return(_a0)
	return _c
}
