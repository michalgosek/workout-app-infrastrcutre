// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	customer "github.com/michalgosek/workout-app-infrastrcutre/trainings-service/internal/domain/customer"
	mock "github.com/stretchr/testify/mock"

	trainer "github.com/michalgosek/workout-app-infrastrcutre/trainings-service/internal/domain/trainer"
)

// CustomerUnregister is an autogenerated mock type for the CustomerUnregister type
type CustomerUnregister struct {
	mock.Mock
}

type CustomerUnregister_Expecter struct {
	mock *mock.Mock
}

func (_m *CustomerUnregister) EXPECT() *CustomerUnregister_Expecter {
	return &CustomerUnregister_Expecter{mock: &_m.Mock}
}

// DeleteCustomerWorkoutDay provides a mock function with given fields: ctx, customerUUID, customerWorkoutDayUUID
func (_m *CustomerUnregister) DeleteCustomerWorkoutDay(ctx context.Context, customerUUID string, customerWorkoutDayUUID string) error {
	ret := _m.Called(ctx, customerUUID, customerWorkoutDayUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, customerUUID, customerWorkoutDayUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomerUnregister_DeleteCustomerWorkoutDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomerWorkoutDay'
type CustomerUnregister_DeleteCustomerWorkoutDay_Call struct {
	*mock.Call
}

// DeleteCustomerWorkoutDay is a helper method to define mock.On call
//  - ctx context.Context
//  - customerUUID string
//  - customerWorkoutDayUUID string
func (_e *CustomerUnregister_Expecter) DeleteCustomerWorkoutDay(ctx interface{}, customerUUID interface{}, customerWorkoutDayUUID interface{}) *CustomerUnregister_DeleteCustomerWorkoutDay_Call {
	return &CustomerUnregister_DeleteCustomerWorkoutDay_Call{Call: _e.mock.On("DeleteCustomerWorkoutDay", ctx, customerUUID, customerWorkoutDayUUID)}
}

func (_c *CustomerUnregister_DeleteCustomerWorkoutDay_Call) Run(run func(ctx context.Context, customerUUID string, customerWorkoutDayUUID string)) *CustomerUnregister_DeleteCustomerWorkoutDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CustomerUnregister_DeleteCustomerWorkoutDay_Call) Return(_a0 error) *CustomerUnregister_DeleteCustomerWorkoutDay_Call {
	_c.Call.Return(_a0)
	return _c
}

// QueryCustomerWorkoutDay provides a mock function with given fields: ctx, customerUUID, trainerWorkoutGroupUUID
func (_m *CustomerUnregister) QueryCustomerWorkoutDay(ctx context.Context, customerUUID string, trainerWorkoutGroupUUID string) (customer.WorkoutDay, error) {
	ret := _m.Called(ctx, customerUUID, trainerWorkoutGroupUUID)

	var r0 customer.WorkoutDay
	if rf, ok := ret.Get(0).(func(context.Context, string, string) customer.WorkoutDay); ok {
		r0 = rf(ctx, customerUUID, trainerWorkoutGroupUUID)
	} else {
		r0 = ret.Get(0).(customer.WorkoutDay)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerUUID, trainerWorkoutGroupUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerUnregister_QueryCustomerWorkoutDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryCustomerWorkoutDay'
type CustomerUnregister_QueryCustomerWorkoutDay_Call struct {
	*mock.Call
}

// QueryCustomerWorkoutDay is a helper method to define mock.On call
//  - ctx context.Context
//  - customerUUID string
//  - trainerWorkoutGroupUUID string
func (_e *CustomerUnregister_Expecter) QueryCustomerWorkoutDay(ctx interface{}, customerUUID interface{}, trainerWorkoutGroupUUID interface{}) *CustomerUnregister_QueryCustomerWorkoutDay_Call {
	return &CustomerUnregister_QueryCustomerWorkoutDay_Call{Call: _e.mock.On("QueryCustomerWorkoutDay", ctx, customerUUID, trainerWorkoutGroupUUID)}
}

func (_c *CustomerUnregister_QueryCustomerWorkoutDay_Call) Run(run func(ctx context.Context, customerUUID string, trainerWorkoutGroupUUID string)) *CustomerUnregister_QueryCustomerWorkoutDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CustomerUnregister_QueryCustomerWorkoutDay_Call) Return(_a0 customer.WorkoutDay, _a1 error) *CustomerUnregister_QueryCustomerWorkoutDay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// QueryWorkoutGroup provides a mock function with given fields: ctx, groupUUID
func (_m *CustomerUnregister) QueryWorkoutGroup(ctx context.Context, groupUUID string) (trainer.WorkoutGroup, error) {
	ret := _m.Called(ctx, groupUUID)

	var r0 trainer.WorkoutGroup
	if rf, ok := ret.Get(0).(func(context.Context, string) trainer.WorkoutGroup); ok {
		r0 = rf(ctx, groupUUID)
	} else {
		r0 = ret.Get(0).(trainer.WorkoutGroup)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerUnregister_QueryWorkoutGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryWorkoutGroup'
type CustomerUnregister_QueryWorkoutGroup_Call struct {
	*mock.Call
}

// QueryWorkoutGroup is a helper method to define mock.On call
//  - ctx context.Context
//  - groupUUID string
func (_e *CustomerUnregister_Expecter) QueryWorkoutGroup(ctx interface{}, groupUUID interface{}) *CustomerUnregister_QueryWorkoutGroup_Call {
	return &CustomerUnregister_QueryWorkoutGroup_Call{Call: _e.mock.On("QueryWorkoutGroup", ctx, groupUUID)}
}

func (_c *CustomerUnregister_QueryWorkoutGroup_Call) Run(run func(ctx context.Context, groupUUID string)) *CustomerUnregister_QueryWorkoutGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CustomerUnregister_QueryWorkoutGroup_Call) Return(_a0 trainer.WorkoutGroup, _a1 error) *CustomerUnregister_QueryWorkoutGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpsertWorkoutGroup provides a mock function with given fields: ctx, group
func (_m *CustomerUnregister) UpsertWorkoutGroup(ctx context.Context, group trainer.WorkoutGroup) error {
	ret := _m.Called(ctx, group)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, trainer.WorkoutGroup) error); ok {
		r0 = rf(ctx, group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomerUnregister_UpsertWorkoutGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertWorkoutGroup'
type CustomerUnregister_UpsertWorkoutGroup_Call struct {
	*mock.Call
}

// UpsertWorkoutGroup is a helper method to define mock.On call
//  - ctx context.Context
//  - group trainer.WorkoutGroup
func (_e *CustomerUnregister_Expecter) UpsertWorkoutGroup(ctx interface{}, group interface{}) *CustomerUnregister_UpsertWorkoutGroup_Call {
	return &CustomerUnregister_UpsertWorkoutGroup_Call{Call: _e.mock.On("UpsertWorkoutGroup", ctx, group)}
}

func (_c *CustomerUnregister_UpsertWorkoutGroup_Call) Run(run func(ctx context.Context, group trainer.WorkoutGroup)) *CustomerUnregister_UpsertWorkoutGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(trainer.WorkoutGroup))
	})
	return _c
}

func (_c *CustomerUnregister_UpsertWorkoutGroup_Call) Return(_a0 error) *CustomerUnregister_UpsertWorkoutGroup_Call {
	_c.Call.Return(_a0)
	return _c
}
