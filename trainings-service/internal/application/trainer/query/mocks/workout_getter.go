// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	trainer "github.com/michalgosek/workout-app-infrastrcutre/trainings-service/internal/domain/trainer"
)

// WorkoutGetter is an autogenerated mock type for the WorkoutGetter type
type WorkoutGetter struct {
	mock.Mock
}

type WorkoutGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *WorkoutGetter) EXPECT() *WorkoutGetter_Expecter {
	return &WorkoutGetter_Expecter{mock: &_m.Mock}
}

// QueryWorkoutGroup provides a mock function with given fields: ctx, groupUUID
func (_m *WorkoutGetter) QueryWorkoutGroup(ctx context.Context, groupUUID string) (trainer.WorkoutGroup, error) {
	ret := _m.Called(ctx, groupUUID)

	var r0 trainer.WorkoutGroup
	if rf, ok := ret.Get(0).(func(context.Context, string) trainer.WorkoutGroup); ok {
		r0 = rf(ctx, groupUUID)
	} else {
		r0 = ret.Get(0).(trainer.WorkoutGroup)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkoutGetter_QueryWorkoutGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryWorkoutGroup'
type WorkoutGetter_QueryWorkoutGroup_Call struct {
	*mock.Call
}

// QueryWorkoutGroup is a helper method to define mock.On call
//  - ctx context.Context
//  - groupUUID string
func (_e *WorkoutGetter_Expecter) QueryWorkoutGroup(ctx interface{}, groupUUID interface{}) *WorkoutGetter_QueryWorkoutGroup_Call {
	return &WorkoutGetter_QueryWorkoutGroup_Call{Call: _e.mock.On("QueryWorkoutGroup", ctx, groupUUID)}
}

func (_c *WorkoutGetter_QueryWorkoutGroup_Call) Run(run func(ctx context.Context, groupUUID string)) *WorkoutGetter_QueryWorkoutGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *WorkoutGetter_QueryWorkoutGroup_Call) Return(_a0 trainer.WorkoutGroup, _a1 error) *WorkoutGetter_QueryWorkoutGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
