// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	trainer "github.com/michalgosek/workout-app-infrastrcutre/trainings-service/internal/domain/trainer"
)

// TrainerService is an autogenerated mock type for the TrainerService type
type TrainerService struct {
	mock.Mock
}

type TrainerService_Expecter struct {
	mock *mock.Mock
}

func (_m *TrainerService) EXPECT() *TrainerService_Expecter {
	return &TrainerService_Expecter{mock: &_m.Mock}
}

// GetTrainerWorkoutGroup provides a mock function with given fields: ctx, trainerUUID, groupUUID
func (_m *TrainerService) GetTrainerWorkoutGroup(ctx context.Context, trainerUUID string, groupUUID string) (trainer.WorkoutGroup, error) {
	ret := _m.Called(ctx, trainerUUID, groupUUID)

	var r0 trainer.WorkoutGroup
	if rf, ok := ret.Get(0).(func(context.Context, string, string) trainer.WorkoutGroup); ok {
		r0 = rf(ctx, trainerUUID, groupUUID)
	} else {
		r0 = ret.Get(0).(trainer.WorkoutGroup)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, trainerUUID, groupUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrainerService_GetTrainerWorkoutGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrainerWorkoutGroup'
type TrainerService_GetTrainerWorkoutGroup_Call struct {
	*mock.Call
}

// GetTrainerWorkoutGroup is a helper method to define mock.On call
//  - ctx context.Context
//  - trainerUUID string
//  - groupUUID string
func (_e *TrainerService_Expecter) GetTrainerWorkoutGroup(ctx interface{}, trainerUUID interface{}, groupUUID interface{}) *TrainerService_GetTrainerWorkoutGroup_Call {
	return &TrainerService_GetTrainerWorkoutGroup_Call{Call: _e.mock.On("GetTrainerWorkoutGroup", ctx, trainerUUID, groupUUID)}
}

func (_c *TrainerService_GetTrainerWorkoutGroup_Call) Run(run func(ctx context.Context, trainerUUID string, groupUUID string)) *TrainerService_GetTrainerWorkoutGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TrainerService_GetTrainerWorkoutGroup_Call) Return(_a0 trainer.WorkoutGroup, _a1 error) *TrainerService_GetTrainerWorkoutGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTrainerWorkoutGroups provides a mock function with given fields: ctx, trainerUUID
func (_m *TrainerService) GetTrainerWorkoutGroups(ctx context.Context, trainerUUID string) ([]trainer.WorkoutGroup, error) {
	ret := _m.Called(ctx, trainerUUID)

	var r0 []trainer.WorkoutGroup
	if rf, ok := ret.Get(0).(func(context.Context, string) []trainer.WorkoutGroup); ok {
		r0 = rf(ctx, trainerUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]trainer.WorkoutGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, trainerUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrainerService_GetTrainerWorkoutGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrainerWorkoutGroups'
type TrainerService_GetTrainerWorkoutGroups_Call struct {
	*mock.Call
}

// GetTrainerWorkoutGroups is a helper method to define mock.On call
//  - ctx context.Context
//  - trainerUUID string
func (_e *TrainerService_Expecter) GetTrainerWorkoutGroups(ctx interface{}, trainerUUID interface{}) *TrainerService_GetTrainerWorkoutGroups_Call {
	return &TrainerService_GetTrainerWorkoutGroups_Call{Call: _e.mock.On("GetTrainerWorkoutGroups", ctx, trainerUUID)}
}

func (_c *TrainerService_GetTrainerWorkoutGroups_Call) Run(run func(ctx context.Context, trainerUUID string)) *TrainerService_GetTrainerWorkoutGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TrainerService_GetTrainerWorkoutGroups_Call) Return(_a0 []trainer.WorkoutGroup, _a1 error) *TrainerService_GetTrainerWorkoutGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewTrainerService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTrainerService creates a new instance of TrainerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTrainerService(t mockConstructorTestingTNewTrainerService) *TrainerService {
	mock := &TrainerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
