// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	query "github.com/michalgosek/workout-app-infrastrcutre/trainings-service/internal/application/trainer/query"
	mock "github.com/stretchr/testify/mock"
)

// TrainerWorkoutGroupsReadModel is an autogenerated mock type for the TrainerWorkoutGroupsReadModel type
type TrainerWorkoutGroupsReadModel struct {
	mock.Mock
}

type TrainerWorkoutGroupsReadModel_Expecter struct {
	mock *mock.Mock
}

func (_m *TrainerWorkoutGroupsReadModel) EXPECT() *TrainerWorkoutGroupsReadModel_Expecter {
	return &TrainerWorkoutGroupsReadModel_Expecter{mock: &_m.Mock}
}

// TrainerWorkoutGroups provides a mock function with given fields: ctx, trainerUUID
func (_m *TrainerWorkoutGroupsReadModel) TrainerWorkoutGroups(ctx context.Context, trainerUUID string) ([]query.TrainerWorkoutGroup, error) {
	ret := _m.Called(ctx, trainerUUID)

	var r0 []query.TrainerWorkoutGroup
	if rf, ok := ret.Get(0).(func(context.Context, string) []query.TrainerWorkoutGroup); ok {
		r0 = rf(ctx, trainerUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]query.TrainerWorkoutGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, trainerUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrainerWorkoutGroupsReadModel_TrainerWorkoutGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TrainerWorkoutGroups'
type TrainerWorkoutGroupsReadModel_TrainerWorkoutGroups_Call struct {
	*mock.Call
}

// TrainerWorkoutGroups is a helper method to define mock.On call
//  - ctx context.Context
//  - trainerUUID string
func (_e *TrainerWorkoutGroupsReadModel_Expecter) TrainerWorkoutGroups(ctx interface{}, trainerUUID interface{}) *TrainerWorkoutGroupsReadModel_TrainerWorkoutGroups_Call {
	return &TrainerWorkoutGroupsReadModel_TrainerWorkoutGroups_Call{Call: _e.mock.On("TrainerWorkoutGroups", ctx, trainerUUID)}
}

func (_c *TrainerWorkoutGroupsReadModel_TrainerWorkoutGroups_Call) Run(run func(ctx context.Context, trainerUUID string)) *TrainerWorkoutGroupsReadModel_TrainerWorkoutGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TrainerWorkoutGroupsReadModel_TrainerWorkoutGroups_Call) Return(_a0 []query.TrainerWorkoutGroup, _a1 error) *TrainerWorkoutGroupsReadModel_TrainerWorkoutGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewTrainerWorkoutGroupsReadModel interface {
	mock.TestingT
	Cleanup(func())
}

// NewTrainerWorkoutGroupsReadModel creates a new instance of TrainerWorkoutGroupsReadModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTrainerWorkoutGroupsReadModel(t mockConstructorTestingTNewTrainerWorkoutGroupsReadModel) *TrainerWorkoutGroupsReadModel {
	mock := &TrainerWorkoutGroupsReadModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
