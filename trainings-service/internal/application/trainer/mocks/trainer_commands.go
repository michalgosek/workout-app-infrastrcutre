// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	trainer "github.com/michalgosek/workout-app-infrastrcutre/trainings-service/internal/domain/trainer"
	mock "github.com/stretchr/testify/mock"
)

// TrainerCommands is an autogenerated mock type for the TrainerCommands type
type TrainerCommands struct {
	mock.Mock
}

type TrainerCommands_Expecter struct {
	mock *mock.Mock
}

func (_m *TrainerCommands) EXPECT() *TrainerCommands_Expecter {
	return &TrainerCommands_Expecter{mock: &_m.Mock}
}

// DeleteWorkoutGroup provides a mock function with given fields: ctx, groupUUID
func (_m *TrainerCommands) DeleteWorkoutGroup(ctx context.Context, groupUUID string) error {
	ret := _m.Called(ctx, groupUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, groupUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TrainerCommands_DeleteWorkoutGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkoutGroup'
type TrainerCommands_DeleteWorkoutGroup_Call struct {
	*mock.Call
}

// DeleteWorkoutGroup is a helper method to define mock.On call
//  - ctx context.Context
//  - groupUUID string
func (_e *TrainerCommands_Expecter) DeleteWorkoutGroup(ctx interface{}, groupUUID interface{}) *TrainerCommands_DeleteWorkoutGroup_Call {
	return &TrainerCommands_DeleteWorkoutGroup_Call{Call: _e.mock.On("DeleteWorkoutGroup", ctx, groupUUID)}
}

func (_c *TrainerCommands_DeleteWorkoutGroup_Call) Run(run func(ctx context.Context, groupUUID string)) *TrainerCommands_DeleteWorkoutGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TrainerCommands_DeleteWorkoutGroup_Call) Return(_a0 error) *TrainerCommands_DeleteWorkoutGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteWorkoutGroups provides a mock function with given fields: ctx, trainerUUID
func (_m *TrainerCommands) DeleteWorkoutGroups(ctx context.Context, trainerUUID string) error {
	ret := _m.Called(ctx, trainerUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, trainerUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TrainerCommands_DeleteWorkoutGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkoutGroups'
type TrainerCommands_DeleteWorkoutGroups_Call struct {
	*mock.Call
}

// DeleteWorkoutGroups is a helper method to define mock.On call
//  - ctx context.Context
//  - trainerUUID string
func (_e *TrainerCommands_Expecter) DeleteWorkoutGroups(ctx interface{}, trainerUUID interface{}) *TrainerCommands_DeleteWorkoutGroups_Call {
	return &TrainerCommands_DeleteWorkoutGroups_Call{Call: _e.mock.On("DeleteWorkoutGroups", ctx, trainerUUID)}
}

func (_c *TrainerCommands_DeleteWorkoutGroups_Call) Run(run func(ctx context.Context, trainerUUID string)) *TrainerCommands_DeleteWorkoutGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TrainerCommands_DeleteWorkoutGroups_Call) Return(_a0 error) *TrainerCommands_DeleteWorkoutGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpsertWorkoutGroup provides a mock function with given fields: ctx, group
func (_m *TrainerCommands) UpsertWorkoutGroup(ctx context.Context, group trainer.WorkoutGroup) error {
	ret := _m.Called(ctx, group)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, trainer.WorkoutGroup) error); ok {
		r0 = rf(ctx, group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TrainerCommands_UpsertWorkoutGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertWorkoutGroup'
type TrainerCommands_UpsertWorkoutGroup_Call struct {
	*mock.Call
}

// UpsertWorkoutGroup is a helper method to define mock.On call
//  - ctx context.Context
//  - group trainer.WorkoutGroup
func (_e *TrainerCommands_Expecter) UpsertWorkoutGroup(ctx interface{}, group interface{}) *TrainerCommands_UpsertWorkoutGroup_Call {
	return &TrainerCommands_UpsertWorkoutGroup_Call{Call: _e.mock.On("UpsertWorkoutGroup", ctx, group)}
}

func (_c *TrainerCommands_UpsertWorkoutGroup_Call) Run(run func(ctx context.Context, group trainer.WorkoutGroup)) *TrainerCommands_UpsertWorkoutGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(trainer.WorkoutGroup))
	})
	return _c
}

func (_c *TrainerCommands_UpsertWorkoutGroup_Call) Return(_a0 error) *TrainerCommands_UpsertWorkoutGroup_Call {
	_c.Call.Return(_a0)
	return _c
}
