// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	services "github.com/michalgosek/workout-app-infrastrcutre/trainings-service/internal/application/services"
	mock "github.com/stretchr/testify/mock"
)

// TrainerService is an autogenerated mock type for the TrainerService type
type TrainerService struct {
	mock.Mock
}

type TrainerService_Expecter struct {
	mock *mock.Mock
}

func (_m *TrainerService) EXPECT() *TrainerService_Expecter {
	return &TrainerService_Expecter{mock: &_m.Mock}
}

// AssignCustomerToWorkoutGroup provides a mock function with given fields: ctx, args
func (_m *TrainerService) AssignCustomerToWorkoutGroup(ctx context.Context, args services.AssignCustomerToWorkoutGroupArgs) (services.AssignedCustomerWorkoutGroupDetails, error) {
	ret := _m.Called(ctx, args)

	var r0 services.AssignedCustomerWorkoutGroupDetails
	if rf, ok := ret.Get(0).(func(context.Context, services.AssignCustomerToWorkoutGroupArgs) services.AssignedCustomerWorkoutGroupDetails); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(services.AssignedCustomerWorkoutGroupDetails)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, services.AssignCustomerToWorkoutGroupArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrainerService_AssignCustomerToWorkoutGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignCustomerToWorkoutGroup'
type TrainerService_AssignCustomerToWorkoutGroup_Call struct {
	*mock.Call
}

// AssignCustomerToWorkoutGroup is a helper method to define mock.On call
//  - ctx context.Context
//  - args services.AssignCustomerToWorkoutGroupArgs
func (_e *TrainerService_Expecter) AssignCustomerToWorkoutGroup(ctx interface{}, args interface{}) *TrainerService_AssignCustomerToWorkoutGroup_Call {
	return &TrainerService_AssignCustomerToWorkoutGroup_Call{Call: _e.mock.On("AssignCustomerToWorkoutGroup", ctx, args)}
}

func (_c *TrainerService_AssignCustomerToWorkoutGroup_Call) Run(run func(ctx context.Context, args services.AssignCustomerToWorkoutGroupArgs)) *TrainerService_AssignCustomerToWorkoutGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.AssignCustomerToWorkoutGroupArgs))
	})
	return _c
}

func (_c *TrainerService_AssignCustomerToWorkoutGroup_Call) Return(_a0 services.AssignedCustomerWorkoutGroupDetails, _a1 error) *TrainerService_AssignCustomerToWorkoutGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CancelCustomerWorkoutParticipation provides a mock function with given fields: ctx, args
func (_m *TrainerService) CancelCustomerWorkoutParticipation(ctx context.Context, args services.CancelCustomerWorkoutParticipationArgs) error {
	ret := _m.Called(ctx, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, services.CancelCustomerWorkoutParticipationArgs) error); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TrainerService_CancelCustomerWorkoutParticipation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelCustomerWorkoutParticipation'
type TrainerService_CancelCustomerWorkoutParticipation_Call struct {
	*mock.Call
}

// CancelCustomerWorkoutParticipation is a helper method to define mock.On call
//  - ctx context.Context
//  - args services.CancelCustomerWorkoutParticipationArgs
func (_e *TrainerService_Expecter) CancelCustomerWorkoutParticipation(ctx interface{}, args interface{}) *TrainerService_CancelCustomerWorkoutParticipation_Call {
	return &TrainerService_CancelCustomerWorkoutParticipation_Call{Call: _e.mock.On("CancelCustomerWorkoutParticipation", ctx, args)}
}

func (_c *TrainerService_CancelCustomerWorkoutParticipation_Call) Run(run func(ctx context.Context, args services.CancelCustomerWorkoutParticipationArgs)) *TrainerService_CancelCustomerWorkoutParticipation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.CancelCustomerWorkoutParticipationArgs))
	})
	return _c
}

func (_c *TrainerService_CancelCustomerWorkoutParticipation_Call) Return(_a0 error) *TrainerService_CancelCustomerWorkoutParticipation_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewTrainerService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTrainerService creates a new instance of TrainerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTrainerService(t mockConstructorTestingTNewTrainerService) *TrainerService {
	mock := &TrainerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
