// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	trainer "github.com/michalgosek/workout-app-infrastrcutre/trainings-service/internal/domain/trainer"
	mock "github.com/stretchr/testify/mock"
)

// CancelWorkoutHandlerRepository is an autogenerated mock type for the CancelWorkoutHandlerRepository type
type CancelWorkoutHandlerRepository struct {
	mock.Mock
}

type CancelWorkoutHandlerRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CancelWorkoutHandlerRepository) EXPECT() *CancelWorkoutHandlerRepository_Expecter {
	return &CancelWorkoutHandlerRepository_Expecter{mock: &_m.Mock}
}

// DeleteCustomerWorkoutDay provides a mock function with given fields: ctx, customerUUID, groupUUID
func (_m *CancelWorkoutHandlerRepository) DeleteCustomerWorkoutDay(ctx context.Context, customerUUID string, groupUUID string) error {
	ret := _m.Called(ctx, customerUUID, groupUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, customerUUID, groupUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelWorkoutHandlerRepository_DeleteCustomerWorkoutDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomerWorkoutDay'
type CancelWorkoutHandlerRepository_DeleteCustomerWorkoutDay_Call struct {
	*mock.Call
}

// DeleteCustomerWorkoutDay is a helper method to define mock.On call
//  - ctx context.Context
//  - customerUUID string
//  - groupUUID string
func (_e *CancelWorkoutHandlerRepository_Expecter) DeleteCustomerWorkoutDay(ctx interface{}, customerUUID interface{}, groupUUID interface{}) *CancelWorkoutHandlerRepository_DeleteCustomerWorkoutDay_Call {
	return &CancelWorkoutHandlerRepository_DeleteCustomerWorkoutDay_Call{Call: _e.mock.On("DeleteCustomerWorkoutDay", ctx, customerUUID, groupUUID)}
}

func (_c *CancelWorkoutHandlerRepository_DeleteCustomerWorkoutDay_Call) Run(run func(ctx context.Context, customerUUID string, groupUUID string)) *CancelWorkoutHandlerRepository_DeleteCustomerWorkoutDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CancelWorkoutHandlerRepository_DeleteCustomerWorkoutDay_Call) Return(_a0 error) *CancelWorkoutHandlerRepository_DeleteCustomerWorkoutDay_Call {
	_c.Call.Return(_a0)
	return _c
}

// QueryWorkoutGroup provides a mock function with given fields: ctx, groupUUID
func (_m *CancelWorkoutHandlerRepository) QueryWorkoutGroup(ctx context.Context, groupUUID string) (trainer.WorkoutGroup, error) {
	ret := _m.Called(ctx, groupUUID)

	var r0 trainer.WorkoutGroup
	if rf, ok := ret.Get(0).(func(context.Context, string) trainer.WorkoutGroup); ok {
		r0 = rf(ctx, groupUUID)
	} else {
		r0 = ret.Get(0).(trainer.WorkoutGroup)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelWorkoutHandlerRepository_QueryWorkoutGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryWorkoutGroup'
type CancelWorkoutHandlerRepository_QueryWorkoutGroup_Call struct {
	*mock.Call
}

// QueryWorkoutGroup is a helper method to define mock.On call
//  - ctx context.Context
//  - groupUUID string
func (_e *CancelWorkoutHandlerRepository_Expecter) QueryWorkoutGroup(ctx interface{}, groupUUID interface{}) *CancelWorkoutHandlerRepository_QueryWorkoutGroup_Call {
	return &CancelWorkoutHandlerRepository_QueryWorkoutGroup_Call{Call: _e.mock.On("QueryWorkoutGroup", ctx, groupUUID)}
}

func (_c *CancelWorkoutHandlerRepository_QueryWorkoutGroup_Call) Run(run func(ctx context.Context, groupUUID string)) *CancelWorkoutHandlerRepository_QueryWorkoutGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CancelWorkoutHandlerRepository_QueryWorkoutGroup_Call) Return(_a0 trainer.WorkoutGroup, _a1 error) *CancelWorkoutHandlerRepository_QueryWorkoutGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpsertWorkoutGroup provides a mock function with given fields: ctx, group
func (_m *CancelWorkoutHandlerRepository) UpsertWorkoutGroup(ctx context.Context, group trainer.WorkoutGroup) error {
	ret := _m.Called(ctx, group)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, trainer.WorkoutGroup) error); ok {
		r0 = rf(ctx, group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelWorkoutHandlerRepository_UpsertWorkoutGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertWorkoutGroup'
type CancelWorkoutHandlerRepository_UpsertWorkoutGroup_Call struct {
	*mock.Call
}

// UpsertWorkoutGroup is a helper method to define mock.On call
//  - ctx context.Context
//  - group trainer.WorkoutGroup
func (_e *CancelWorkoutHandlerRepository_Expecter) UpsertWorkoutGroup(ctx interface{}, group interface{}) *CancelWorkoutHandlerRepository_UpsertWorkoutGroup_Call {
	return &CancelWorkoutHandlerRepository_UpsertWorkoutGroup_Call{Call: _e.mock.On("UpsertWorkoutGroup", ctx, group)}
}

func (_c *CancelWorkoutHandlerRepository_UpsertWorkoutGroup_Call) Run(run func(ctx context.Context, group trainer.WorkoutGroup)) *CancelWorkoutHandlerRepository_UpsertWorkoutGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(trainer.WorkoutGroup))
	})
	return _c
}

func (_c *CancelWorkoutHandlerRepository_UpsertWorkoutGroup_Call) Return(_a0 error) *CancelWorkoutHandlerRepository_UpsertWorkoutGroup_Call {
	_c.Call.Return(_a0)
	return _c
}
