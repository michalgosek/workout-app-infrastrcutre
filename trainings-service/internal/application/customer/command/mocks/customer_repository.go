// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	customer "github.com/michalgosek/workout-app-infrastrcutre/trainings-service/internal/domain/customer"
	mock "github.com/stretchr/testify/mock"
)

// CustomerRepository is an autogenerated mock type for the CustomerRepository type
type CustomerRepository struct {
	mock.Mock
}

type CustomerRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CustomerRepository) EXPECT() *CustomerRepository_Expecter {
	return &CustomerRepository_Expecter{mock: &_m.Mock}
}

// DeleteCustomerWorkoutDay provides a mock function with given fields: ctx, customerUUID, groupUUID
func (_m *CustomerRepository) DeleteCustomerWorkoutDay(ctx context.Context, customerUUID string, groupUUID string) error {
	ret := _m.Called(ctx, customerUUID, groupUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, customerUUID, groupUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomerRepository_DeleteCustomerWorkoutDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomerWorkoutDay'
type CustomerRepository_DeleteCustomerWorkoutDay_Call struct {
	*mock.Call
}

// DeleteCustomerWorkoutDay is a helper method to define mock.On call
//  - ctx context.Context
//  - customerUUID string
//  - groupUUID string
func (_e *CustomerRepository_Expecter) DeleteCustomerWorkoutDay(ctx interface{}, customerUUID interface{}, groupUUID interface{}) *CustomerRepository_DeleteCustomerWorkoutDay_Call {
	return &CustomerRepository_DeleteCustomerWorkoutDay_Call{Call: _e.mock.On("DeleteCustomerWorkoutDay", ctx, customerUUID, groupUUID)}
}

func (_c *CustomerRepository_DeleteCustomerWorkoutDay_Call) Run(run func(ctx context.Context, customerUUID string, groupUUID string)) *CustomerRepository_DeleteCustomerWorkoutDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CustomerRepository_DeleteCustomerWorkoutDay_Call) Return(_a0 error) *CustomerRepository_DeleteCustomerWorkoutDay_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpsertCustomerWorkoutDay provides a mock function with given fields: ctx, workout
func (_m *CustomerRepository) UpsertCustomerWorkoutDay(ctx context.Context, workout customer.WorkoutDay) error {
	ret := _m.Called(ctx, workout)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, customer.WorkoutDay) error); ok {
		r0 = rf(ctx, workout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomerRepository_UpsertCustomerWorkoutDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertCustomerWorkoutDay'
type CustomerRepository_UpsertCustomerWorkoutDay_Call struct {
	*mock.Call
}

// UpsertCustomerWorkoutDay is a helper method to define mock.On call
//  - ctx context.Context
//  - workout customer.WorkoutDay
func (_e *CustomerRepository_Expecter) UpsertCustomerWorkoutDay(ctx interface{}, workout interface{}) *CustomerRepository_UpsertCustomerWorkoutDay_Call {
	return &CustomerRepository_UpsertCustomerWorkoutDay_Call{Call: _e.mock.On("UpsertCustomerWorkoutDay", ctx, workout)}
}

func (_c *CustomerRepository_UpsertCustomerWorkoutDay_Call) Run(run func(ctx context.Context, workout customer.WorkoutDay)) *CustomerRepository_UpsertCustomerWorkoutDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(customer.WorkoutDay))
	})
	return _c
}

func (_c *CustomerRepository_UpsertCustomerWorkoutDay_Call) Return(_a0 error) *CustomerRepository_UpsertCustomerWorkoutDay_Call {
	_c.Call.Return(_a0)
	return _c
}
