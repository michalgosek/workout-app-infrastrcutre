// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	customer "github.com/michalgosek/workout-app-infrastrcutre/trainings-service/internal/domain/customer"
	mock "github.com/stretchr/testify/mock"

	trainer "github.com/michalgosek/workout-app-infrastrcutre/trainings-service/internal/domain/trainer"
)

// WorkoutDayHandlerRepository is an autogenerated mock type for the WorkoutDayHandlerRepository type
type WorkoutDayHandlerRepository struct {
	mock.Mock
}

type WorkoutDayHandlerRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *WorkoutDayHandlerRepository) EXPECT() *WorkoutDayHandlerRepository_Expecter {
	return &WorkoutDayHandlerRepository_Expecter{mock: &_m.Mock}
}

// QueryCustomerWorkoutDay provides a mock function with given fields: ctx, customerUUID, groupUUID
func (_m *WorkoutDayHandlerRepository) QueryCustomerWorkoutDay(ctx context.Context, customerUUID string, groupUUID string) (customer.WorkoutDay, error) {
	ret := _m.Called(ctx, customerUUID, groupUUID)

	var r0 customer.WorkoutDay
	if rf, ok := ret.Get(0).(func(context.Context, string, string) customer.WorkoutDay); ok {
		r0 = rf(ctx, customerUUID, groupUUID)
	} else {
		r0 = ret.Get(0).(customer.WorkoutDay)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerUUID, groupUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkoutDayHandlerRepository_QueryCustomerWorkoutDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryCustomerWorkoutDay'
type WorkoutDayHandlerRepository_QueryCustomerWorkoutDay_Call struct {
	*mock.Call
}

// QueryCustomerWorkoutDay is a helper method to define mock.On call
//  - ctx context.Context
//  - customerUUID string
//  - groupUUID string
func (_e *WorkoutDayHandlerRepository_Expecter) QueryCustomerWorkoutDay(ctx interface{}, customerUUID interface{}, groupUUID interface{}) *WorkoutDayHandlerRepository_QueryCustomerWorkoutDay_Call {
	return &WorkoutDayHandlerRepository_QueryCustomerWorkoutDay_Call{Call: _e.mock.On("QueryCustomerWorkoutDay", ctx, customerUUID, groupUUID)}
}

func (_c *WorkoutDayHandlerRepository_QueryCustomerWorkoutDay_Call) Run(run func(ctx context.Context, customerUUID string, groupUUID string)) *WorkoutDayHandlerRepository_QueryCustomerWorkoutDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *WorkoutDayHandlerRepository_QueryCustomerWorkoutDay_Call) Return(_a0 customer.WorkoutDay, _a1 error) *WorkoutDayHandlerRepository_QueryCustomerWorkoutDay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// QueryWorkoutGroup provides a mock function with given fields: ctx, trainerUUID, groupUUID
func (_m *WorkoutDayHandlerRepository) QueryWorkoutGroup(ctx context.Context, trainerUUID string, groupUUID string) (trainer.WorkoutGroup, error) {
	ret := _m.Called(ctx, trainerUUID, groupUUID)

	var r0 trainer.WorkoutGroup
	if rf, ok := ret.Get(0).(func(context.Context, string, string) trainer.WorkoutGroup); ok {
		r0 = rf(ctx, trainerUUID, groupUUID)
	} else {
		r0 = ret.Get(0).(trainer.WorkoutGroup)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, trainerUUID, groupUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkoutDayHandlerRepository_QueryWorkoutGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryWorkoutGroup'
type WorkoutDayHandlerRepository_QueryWorkoutGroup_Call struct {
	*mock.Call
}

// QueryWorkoutGroup is a helper method to define mock.On call
//  - ctx context.Context
//  - trainerUUID string
//  - groupUUID string
func (_e *WorkoutDayHandlerRepository_Expecter) QueryWorkoutGroup(ctx interface{}, trainerUUID interface{}, groupUUID interface{}) *WorkoutDayHandlerRepository_QueryWorkoutGroup_Call {
	return &WorkoutDayHandlerRepository_QueryWorkoutGroup_Call{Call: _e.mock.On("QueryWorkoutGroup", ctx, trainerUUID, groupUUID)}
}

func (_c *WorkoutDayHandlerRepository_QueryWorkoutGroup_Call) Run(run func(ctx context.Context, trainerUUID string, groupUUID string)) *WorkoutDayHandlerRepository_QueryWorkoutGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *WorkoutDayHandlerRepository_QueryWorkoutGroup_Call) Return(_a0 trainer.WorkoutGroup, _a1 error) *WorkoutDayHandlerRepository_QueryWorkoutGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewWorkoutDayHandlerRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewWorkoutDayHandlerRepository creates a new instance of WorkoutDayHandlerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWorkoutDayHandlerRepository(t mockConstructorTestingTNewWorkoutDayHandlerRepository) *WorkoutDayHandlerRepository {
	mock := &WorkoutDayHandlerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
