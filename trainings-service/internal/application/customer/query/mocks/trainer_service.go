// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domaintrainer "github.com/michalgosek/workout-app-infrastrcutre/trainings-service/internal/domain/trainer"
	mock "github.com/stretchr/testify/mock"

	trainer "github.com/michalgosek/workout-app-infrastrcutre/trainings-service/internal/application/services/trainer"
)

// TrainerService is an autogenerated mock type for the TrainerService type
type TrainerService struct {
	mock.Mock
}

type TrainerService_Expecter struct {
	mock *mock.Mock
}

func (_m *TrainerService) EXPECT() *TrainerService_Expecter {
	return &TrainerService_Expecter{mock: &_m.Mock}
}

// GetCustomerWorkoutGroup provides a mock function with given fields: ctx, args
func (_m *TrainerService) GetCustomerWorkoutGroup(ctx context.Context, args trainer.WorkoutGroupWithCustomerArgs) (domaintrainer.WorkoutGroup, error) {
	ret := _m.Called(ctx, args)

	var r0 domaintrainer.WorkoutGroup
	if rf, ok := ret.Get(0).(func(context.Context, trainer.WorkoutGroupWithCustomerArgs) domaintrainer.WorkoutGroup); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(domaintrainer.WorkoutGroup)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, trainer.WorkoutGroupWithCustomerArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrainerService_GetCustomerWorkoutGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomerWorkoutGroup'
type TrainerService_GetCustomerWorkoutGroup_Call struct {
	*mock.Call
}

// GetCustomerWorkoutGroup is a helper method to define mock.On call
//  - ctx context.Context
//  - args trainer.WorkoutGroupWithCustomerArgs
func (_e *TrainerService_Expecter) GetCustomerWorkoutGroup(ctx interface{}, args interface{}) *TrainerService_GetCustomerWorkoutGroup_Call {
	return &TrainerService_GetCustomerWorkoutGroup_Call{Call: _e.mock.On("GetCustomerWorkoutGroup", ctx, args)}
}

func (_c *TrainerService_GetCustomerWorkoutGroup_Call) Run(run func(ctx context.Context, args trainer.WorkoutGroupWithCustomerArgs)) *TrainerService_GetCustomerWorkoutGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(trainer.WorkoutGroupWithCustomerArgs))
	})
	return _c
}

func (_c *TrainerService_GetCustomerWorkoutGroup_Call) Return(_a0 domaintrainer.WorkoutGroup, _a1 error) *TrainerService_GetCustomerWorkoutGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewTrainerService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTrainerService creates a new instance of TrainerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTrainerService(t mockConstructorTestingTNewTrainerService) *TrainerService {
	mock := &TrainerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
