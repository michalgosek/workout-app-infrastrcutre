// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	registry "service-discovery/internal/registry"

	mock "github.com/stretchr/testify/mock"
)

// RegistryService is an autogenerated mock type for the RegistryService type
type RegistryService struct {
	mock.Mock
}

type RegistryService_Expecter struct {
	mock *mock.Mock
}

func (_m *RegistryService) EXPECT() *RegistryService_Expecter {
	return &RegistryService_Expecter{mock: &_m.Mock}
}

// Register provides a mock function with given fields: ss
func (_m *RegistryService) Register(ss ...registry.ServiceInstance) error {
	_va := make([]interface{}, len(ss))
	for _i := range ss {
		_va[_i] = ss[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...registry.ServiceInstance) error); ok {
		r0 = rf(ss...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegistryService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type RegistryService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//  - ss ...registry.ServiceInstance
func (_e *RegistryService_Expecter) Register(ss ...interface{}) *RegistryService_Register_Call {
	return &RegistryService_Register_Call{Call: _e.mock.On("Register",
		append([]interface{}{}, ss...)...)}
}

func (_c *RegistryService_Register_Call) Run(run func(ss ...registry.ServiceInstance)) *RegistryService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]registry.ServiceInstance, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(registry.ServiceInstance)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *RegistryService_Register_Call) Return(_a0 error) *RegistryService_Register_Call {
	_c.Call.Return(_a0)
	return _c
}
