// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	registry "service-discovery/internal/registry"

	mock "github.com/stretchr/testify/mock"
)

// ServiceRegistry is an autogenerated mock type for the ServiceRegistry type
type ServiceRegistry struct {
	mock.Mock
}

type ServiceRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceRegistry) EXPECT() *ServiceRegistry_Expecter {
	return &ServiceRegistry_Expecter{mock: &_m.Mock}
}

// QueryInstances provides a mock function with given fields: name
func (_m *ServiceRegistry) QueryInstances(name string) ([]registry.ServiceInstance, error) {
	ret := _m.Called(name)

	var r0 []registry.ServiceInstance
	if rf, ok := ret.Get(0).(func(string) []registry.ServiceInstance); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]registry.ServiceInstance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceRegistry_QueryInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryInstances'
type ServiceRegistry_QueryInstances_Call struct {
	*mock.Call
}

// QueryInstances is a helper method to define mock.On call
//  - name string
func (_e *ServiceRegistry_Expecter) QueryInstances(name interface{}) *ServiceRegistry_QueryInstances_Call {
	return &ServiceRegistry_QueryInstances_Call{Call: _e.mock.On("QueryInstances", name)}
}

func (_c *ServiceRegistry_QueryInstances_Call) Run(run func(name string)) *ServiceRegistry_QueryInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ServiceRegistry_QueryInstances_Call) Return(_a0 []registry.ServiceInstance, _a1 error) *ServiceRegistry_QueryInstances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Register provides a mock function with given fields: ss
func (_m *ServiceRegistry) Register(ss ...registry.ServiceInstance) error {
	_va := make([]interface{}, len(ss))
	for _i := range ss {
		_va[_i] = ss[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...registry.ServiceInstance) error); ok {
		r0 = rf(ss...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceRegistry_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type ServiceRegistry_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//  - ss ...registry.ServiceInstance
func (_e *ServiceRegistry_Expecter) Register(ss ...interface{}) *ServiceRegistry_Register_Call {
	return &ServiceRegistry_Register_Call{Call: _e.mock.On("Register",
		append([]interface{}{}, ss...)...)}
}

func (_c *ServiceRegistry_Register_Call) Run(run func(ss ...registry.ServiceInstance)) *ServiceRegistry_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]registry.ServiceInstance, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(registry.ServiceInstance)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *ServiceRegistry_Register_Call) Return(_a0 error) *ServiceRegistry_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateStatus provides a mock function with given fields: s
func (_m *ServiceRegistry) UpdateStatus(s registry.ServiceInstance) error {
	ret := _m.Called(s)

	var r0 error
	if rf, ok := ret.Get(0).(func(registry.ServiceInstance) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceRegistry_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type ServiceRegistry_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//  - s registry.ServiceInstance
func (_e *ServiceRegistry_Expecter) UpdateStatus(s interface{}) *ServiceRegistry_UpdateStatus_Call {
	return &ServiceRegistry_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", s)}
}

func (_c *ServiceRegistry_UpdateStatus_Call) Run(run func(s registry.ServiceInstance)) *ServiceRegistry_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(registry.ServiceInstance))
	})
	return _c
}

func (_c *ServiceRegistry_UpdateStatus_Call) Return(_a0 error) *ServiceRegistry_UpdateStatus_Call {
	_c.Call.Return(_a0)
	return _c
}
