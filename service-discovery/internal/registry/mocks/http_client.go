// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// HTTPClient is an autogenerated mock type for the HTTPClient type
type HTTPClient struct {
	mock.Mock
}

type HTTPClient_Expecter struct {
	mock *mock.Mock
}

func (_m *HTTPClient) EXPECT() *HTTPClient_Expecter {
	return &HTTPClient_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: url
func (_m *HTTPClient) Get(url string) (*http.Response, error) {
	ret := _m.Called(url)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string) *http.Response); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HTTPClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type HTTPClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - url string
func (_e *HTTPClient_Expecter) Get(url interface{}) *HTTPClient_Get_Call {
	return &HTTPClient_Get_Call{Call: _e.mock.On("Get", url)}
}

func (_c *HTTPClient_Get_Call) Run(run func(url string)) *HTTPClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *HTTPClient_Get_Call) Return(resp *http.Response, err error) *HTTPClient_Get_Call {
	_c.Call.Return(resp, err)
	return _c
}
